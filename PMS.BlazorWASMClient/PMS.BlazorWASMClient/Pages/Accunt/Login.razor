@page "/login"

@inject IAccountService accountService
@inject IJSRuntime jsRuntime

<div class="text-center">
    <div class="row">
        <div class="col-3">
            <EditForm Model="LoginRequestDTO" OnValidSubmit="UserLogin" OnInvalidSubmit="InvalidSubmit">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <i class="fa fa-sign-in fa-4x" aria-hidden="true"></i>
                <h1 class="h3 mb-3 fw-normal">Please sign in</h1>

                <div class="form-floating mb-2">
                    <InputText @bind-Value="LoginRequestDTO.Email" type="email" class="form-control" id="floatingEmail" placeholder="name@example.com" />
                    <label for="floatingEmail">Email</label>
                    <ValidationMessage For="(()=>LoginRequestDTO.Email)"></ValidationMessage>
                </div>
                <div class="form-floating mb-2">
                    <InputText @bind-Value="LoginRequestDTO.Password" type="password" class="form-control" id="floatingPassword" placeholder="Password" />
                    <label for="floatingPassword">Password</label>
                    <ValidationMessage For="(()=>LoginRequestDTO.Password)"></ValidationMessage>
                </div>
                <button class="w-100 btn btn-lg btn-primary mb-2" type="submit">Sign in</button>
                <p class="mt-5 mb-3 text-muted">&copy; 2017–2021</p>
            </EditForm>
        </div>
    </div>
</div>

@code {
    LoginRequestDTO LoginRequestDTO = new LoginRequestDTO();

    private async Task UserLogin()
    {
        var response = await accountService.Login(LoginRequestDTO);

        if (!string.IsNullOrWhiteSpace(response.Email))
        {
            await jsRuntime.ShowToastr("success", "You are signed in successfully.");
        }
        else
        {
            await jsRuntime.ShowToastr("error", "Sign in failed.");
        }
    }

    private async Task InvalidSubmit()
    {
        await jsRuntime.ShowToastr("error", "Check your inputes.");
    }
}
