@page "/projects/{ProjectName}"

@inject IProjectService projectService
@inject IProjectTaskService projectTaskService
@inject IJSRuntime jsRuntime
@inject IAccountService accountService

@attribute [Authorize]

<div class="row mb-2">
    <h3>@ProjectName Summary</h3>
</div>
<div class="row mb-2">
    <div class="col-3">
        <div class="card card-bg">
            <h5 class="card-header bg-light border-0">Project Statistics</h5>
            <div class="card-body">
                <div class="row border-bottom mb-3 pb-3">
                    <div class="col-10">
                        <strong class="text-info">Total Tasks:</strong>
                    </div>
                    <div class="col-2">
                        <strong class="text-info">@TotalCount</strong>
                    </div>
                </div>
                <div class="row border-bottom mb-3 pb-3">
                    <div class="col-10">
                        <strong class="text-success">Completed Tasks:</strong>
                    </div>
                    <div class="col-2">
                        <strong class="text-success">@CompleteCount</strong>
                    </div>
                </div>
                <div class="row border-bottom mb-3 pb-3">
                    <div class="col-10">
                        <strong class="text-warning">Remained Tasks:</strong>
                    </div>
                    <div class="col-2">
                        <strong class="text-warning">@RemainedCount</strong>
                    </div>
                </div>
                <div class="row border-bottom mb-3 pb-3">
                    <div class="col-8">
                        <strong>Deadline Date:</strong>
                    </div>
                    <div class="col-4">
                        <strong>@DeadlineDate.ToShortDateString()</strong>
                    </div>
                </div>
                <div class="row mb-3 pb-3">
                    <div class="col text-center">
                        @if (DaysToDeadline > 0)
                        {
                            <strong>@DaysToDeadline Day(s) to deadline.</strong>
                        }
                        else if (DaysToDeadline == 0)
                        {
                            <strong class="text-warning">today is project deadline data.</strong>
                        }
                        else if (DaysToDeadline < 0)
                        {
                            <strong class="text-danger">Project deadline was @Math.Abs(DaysToDeadline) day(s) ago.</strong>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="card card-bg mt-3 overflow-scroll" style="max-height:360px;">
            <div class="card-header bg-light border-0"><h5>Project Members</h5><button class="btn btn-sm btn-primary" @onclick="()=>ShowProjectMemberModal(true)"><i class="fa fa-plus"></i>&nbsp; Add Member</button></div>
            <div class="card-body">
                @for (int index = 0; index < MemberList.Count(); index++)
                {
                    int itemIndex = index;
                    string backgroundClass = string.Empty;

                    @if (itemIndex % 2 == 0)
                    {
                        backgroundClass = "bg-secondary";
                    }

                    <div class="row mb-2">
                        <div class="card @(backgroundClass)">
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-2"><button class="btn btn-sm btn-danger" @onclick="()=>DeleteMember(MemberList[itemIndex].Email)"><i class="fa fa-window-close" aria-hidden="true"></i></button></div>
                                    <div class="col-10">
                                        <strong>@MemberList[itemIndex].Username</strong>
                                        <span>@MemberList[itemIndex].Email</span>
                                        <span>@MemberList[itemIndex].Mobile</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="col">
        <div class="card card-bg">
            <div class="card-header bg-light border-0 pb-3">
                <h5>Project Tasks</h5> <button class="btn btn-sm btn-primary" @onclick="()=>ShowNewTaskModal(true)"><i class="fa fa-plus"></i>&nbsp; Add Task</button>
            </div>
            <div class="card-body">
                <table class="table">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Status</th>
                            <th>Title</th>
                            <th>Created Date</th>
                            <th>Deadline Date</th>
                            <th>Complete Date</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int index = 0; index < TaskList.Count(); index++)
                        {
                            int itemIndex = index;
                            string statusText = string.Empty;
                            string statusClass = string.Empty;
                            bool isDone = TaskList[itemIndex].Done;

                            @if (isDone)
                            {
                                statusText = "Finished";
                                statusClass = "badge bg-success";

                                if (TaskList[itemIndex].CompleteDate.HasValue && TaskList[itemIndex].CompleteDate.Value.Date >= TaskList[itemIndex].DeadlineDate.Date)
                                {
                                    statusText = "Finished After Deadline";
                                    statusClass = "badge bg-danger";
                                }
                            }
                            else
                            {
                                statusText = "In Progress";
                                statusClass = "badge bg-warning text-dark";

                                if (DateTime.Now.Date >= TaskList[itemIndex].DeadlineDate.Date)
                                {
                                    statusText = "Deadline Reached";
                                    statusClass = "badge bg-danger";
                                }
                            }

                            <tr>
                                <td>@(((CurrentPage - 1) * PageSize) + itemIndex + 1)</td>
                                <td><span class="@(statusClass)">@statusText</span></td>
                                <td><a style="text-decoration:none;" href="#"> @TaskList[itemIndex].Title</a></td>
                                <td data-toggle="tooltip" data-placement="top" title="@(TaskList[itemIndex].CreatedDate)">@TaskList[itemIndex].CreatedDate.ToShortDateString()</td>
                                <td>@TaskList[itemIndex].DeadlineDate.ToShortDateString()</td>
                                <td data-toggle="tooltip" data-placement="top" title="@(TaskList[itemIndex].CompleteDate)">@TaskList[itemIndex].CompleteDate?.ToShortDateString()</td>
                                <td>
                                    <button class="btn btn-sm btn-secondary" @onclick="()=>ShowAssignedUsersModal(true)">Assigned Users</button>
                                    <button class="btn btn-sm btn-success" disabled="@(isDone)" @onclick="()=>MarkAsDone(TaskList[itemIndex])">Done</button>
                                    <button class="btn btn-sm btn-warning" disabled="@(isDone)" @onclick="()=>ShowNewTaskModal(true,TaskList[itemIndex])">Update</button>
                                    <button class="btn btn-sm btn-danger" disabled="@(isDone)" @onclick="()=>ShowDeleteModal(TaskList[itemIndex])">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <Pagination @ref="Pagination" ItemCount="ItemCount" PageSize="PageSize" CurrentPage="CurrentPage" OnPageChanged="OnPageChanged"></Pagination>
            </div>
        </div>
    </div>
</div>

@if (NewProjectTaskModalVisible)
{
    <!-- Modal -->
    <div class="modal fade show" id="create-task-modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="create-task-modal-label"
         aria-modal="true" role="dialog" style="display:block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <EditForm Model="NewProjectTask" OnValidSubmit="CreateNewProjectTask">
                    <div class="modal-header">
                        <h5 class="modal-title" id="create-task-modal-header-label">@(IsCreateProjectTaskMode?"New Task":"Update Task")</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="()=>ShowNewTaskModal(false)"></button>
                    </div>
                    <div class="modal-body">
                        <label for="title">Title</label>
                        <InputText id="title" @bind-Value="NewProjectTask.Title" class="form-control" disabled="@(!IsCreateProjectTaskMode)" />
                        <div class="mt-3">
                            <label for="description">Description</label>
                            <InputTextArea id="description" @bind-Value="NewProjectTask.Description" class="form-control" />
                        </div>
                        <div class="mt-3">
                            <label for="deadlineDate">Deadline Date</label>
                            <InputDate id="deadlineDate" @bind-Value="NewProjectTask.DeadlineDate" class="form-control" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="()=>ShowNewTaskModal(false)">Close</button>
                        <button type="submit" class="btn btn-primary">Done</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

<ConfirmAlert @ref="ConfirmAlert" Title="Detele Task" OnConfirm="DeleteTask">
    <div>
        <p>Are you sure you want to delete this task?</p>
        Task Title: <strong>@SelectedProjectTask.Title</strong>
        <div>
            <p class="text-danger">Delete a task will remove all stuff related to task including files and all task histories.</p>
        </div>
    </div>
</ConfirmAlert>

@if (AddProjectMemberModalVisible)
{
    <!-- Modal -->
    <div class="modal fade show" id="add-member-modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="add-member-modal-label"
         aria-modal="true" role="dialog" style="display:block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <EditForm Model="SelectedUser" OnValidSubmit="SaveProjectMemberList">
                    <div class="modal-header">
                        <h5 class="modal-title" id="create-task-modal-header-label">Add Project Member(s)</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="()=>ShowProjectMemberModal(false)"></button>
                    </div>
                    <div class="modal-body">
                        <label>Search user by email</label>
                        <div class="mt-2">
                            <BlazoredTypeahead SearchMethod="SerarchInUsers" @bind-Value="SelectedUser" Debounce="500">
                                <SelectedTemplate Context="SearchResponse">
                                    @SearchResponse.UserEmail
                                </SelectedTemplate>
                                <ResultTemplate Context="SearchResponse">
                                    @SearchResponse.UserEmail
                                </ResultTemplate>
                                <NotFoundTemplate Context="SearchResponse">
                                    Sorry, there weren't any search results.
                                </NotFoundTemplate>
                            </BlazoredTypeahead>
                        </div>
                        <div class="row mt-2">
                            <div class="col">
                                <button type="button" class="btn btn-primary btn-sm" @onclick="AddToMemberList">Add To List</button>
                            </div>
                        </div>
                        <div class="row mt-2">
                            <div class="col">
                                @foreach (var item in RegisterProjectMemberList)
                                {
                                    <div class="row mt-2">
                                        <span><strong>@item.UserEmail </strong>&nbsp;<i style="cursor:pointer;" class="text-danger fa fa-window-close" @onclick="()=>DeleteFromMemberList(item.UserEmail)"></i></span>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="()=>ShowProjectMemberModal(false)">Close</button>
                        <button type="submit" class="btn btn-primary">Done</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@if (AssignedUsersModalVisible)
{
    <!-- Modal -->
    <div class="modal fade show" id="add-member-modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="add-member-modal-label"
         aria-modal="true" role="dialog" style="display:block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="create-task-modal-header-label">Assign Task To User</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="()=>ShowAssignedUsersModal(false)"></button>
                </div>
                <div class="modal-body">
                    <div class="row mt-2">
                        <div class="col">
                            @for (int index = 0; index < MemberList.Count; index++)
                            {
                                int itemIndex = index;
                                string email = MemberList[itemIndex].Email;
                                string username = MemberList[itemIndex].Username;
                                int userId = MemberList[itemIndex].UserId;

                                <div class="form-check mt-1">
                                    <input class="form-check-input" type="checkbox" value="" id="chk@(userId.ToString())" @onchange="(eventArgs)=>AssignTaskCheckboxChanged(email,userId,eventArgs.Value)"/>
                                    <label class="form-check-label" for="chk@(username)">
                                        <strong>@username</strong>&nbsp;(@email)
                                    </label>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col">
                            @foreach (var item in RegisterProjectMemberList)
                            {
                                <div class="row mt-2">
                                    <span><strong>@item.UserEmail </strong>&nbsp;<i style="cursor:pointer;" class="text-danger fa fa-window-close" @onclick="()=>DeleteFromMemberList(item.UserEmail)"></i></span>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="()=>ShowAssignedUsersModal(false)">Close</button>
                    <button type="submit" class="btn btn-primary">Done</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string ProjectName { get; set; }

    private ConfirmAlert ConfirmAlert;
    Pagination Pagination;
    public int ItemCount { get; set; }
    public int PageSize
    {
        get
        {
            return 10;
        }
    }
    public int CurrentPage { get; set; }

    List<ProjectTaskDTO> PureTaskList = new List<ProjectTaskDTO>();
    List<ProjectTaskDTO> TaskList
    {
        get
        {
            return FilteredTable();
        }
    }
    int ProjectId { get; set; }

    bool AddProjectMemberModalVisible = false;
    List<ProjectMemberDTO> MemberList = new List<ProjectMemberDTO>();
    UserSearchResponseDTO SelectedUser = new UserSearchResponseDTO();
    List<ProjectMemberRegisterDTO> RegisterProjectMemberList = new List<ProjectMemberRegisterDTO>();

    bool NewProjectTaskModalVisible = false;
    bool IsCreateProjectTaskMode = true;
    ProjectTaskRegisterDTO NewProjectTask = new ProjectTaskRegisterDTO();
    ProjectTaskDTO SelectedProjectTask = new ProjectTaskDTO();

    bool AssignedUsersModalVisible = false;


    public int TotalCount
    {
        get
        {
            return PureTaskList.Count;
        }
    }

    public int CompleteCount
    {
        get
        {
            return PureTaskList.Where(t => t.Done).Count();
        }
    }

    public int RemainedCount
    {
        get
        {
            return TotalCount - CompleteCount;
        }
    }

    public DateTime DeadlineDate { get; set; }

    public int DaysToDeadline
    {
        get
        {
            return (int)(DeadlineDate - DateTime.Now).TotalDays;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var result = await projectService.GetProjectSummary(ProjectName);

        if (result.IsSuccess)
        {
            DeadlineDate = result.Data.ProjectDeadlineDate;

            if (result.Data.ProjectTasks is not null && result.Data.ProjectTasks.Count() > 0)
            {
                PureTaskList = result.Data.ProjectTasks.ToList();
                ProjectId = result.Data.ProjectId;
                ItemCount = PureTaskList.Count;
                CurrentPage = 1;
            }

            if (result.Data.ProjectMembers is not null && result.Data.ProjectMembers.Count() > 0)
            {
                MemberList = result.Data.ProjectMembers.ToList();
            }
        }
    }

    private async Task GetTasks()
    {
        var tasks = await projectService.GetProjectTasks(ProjectName);

        if (tasks.IsSuccess)
        {
            PureTaskList = tasks.Data.ToList();
            CurrentPage = Pagination.LastPageNumber;
        }
    }

    private async Task GetMembers()
    {
        var members = await projectService.GetProjectMembers(ProjectName);

        if (members.IsSuccess)
        {
            MemberList = members.Data.ToList();
        }
    }

    private List<ProjectTaskDTO> FilteredTable()
    {
        List<ProjectTaskDTO> list = new List<ProjectTaskDTO>();

        list = PaginateTable(GroupedTable(PureTaskList));

        return list;
    }

    private List<ProjectTaskDTO> GroupedTable(List<ProjectTaskDTO> pureList)
    {
        List<ProjectTaskDTO> list = new List<ProjectTaskDTO>();

        list = pureList;

        ItemCount = list.Count;

        return list;
    }

    private List<ProjectTaskDTO> PaginateTable(List<ProjectTaskDTO> pureList)
    {
        List<ProjectTaskDTO> list = new List<ProjectTaskDTO>();

        list = pureList.Skip(PageSize * (CurrentPage - 1)).Take(PageSize).ToList();

        return list;
    }

    private void OnPageChanged(int page)
    {
        CurrentPage = page;
    }

    private async Task CreateNewProjectTask()
    {
        NewProjectTask.ProjectId = ProjectId;
        string messageType = string.Empty;

        if (IsCreateProjectTaskMode)
        {
            var result = await projectTaskService.CreateProjectTask(NewProjectTask);

            messageType = result.IsSuccess ? "success" : "error";

            await jsRuntime.ShowToastr(messageType, result.Message);

            if (result.IsSuccess)
            {
                ClearForm();
                await GetTasks();
            }
        }
        else
        {
            var updatedTask = new ProjectTaskUpdateDTO()
            {
                TaskId = SelectedProjectTask.Id,
                Description = NewProjectTask.Description,
                DeadlineDate = NewProjectTask.DeadlineDate
            };

            var result = await projectTaskService.UpdateProjectTask(updatedTask);

            messageType = result.IsSuccess ? "success" : "error";

            await jsRuntime.ShowToastr(messageType, result.Message);

            if (result.IsSuccess)
            {
                var updatedItem = PureTaskList.Where(t => t.Id == SelectedProjectTask.Id).Single();

                updatedItem.Description = NewProjectTask.Description;
                updatedItem.DeadlineDate = NewProjectTask.DeadlineDate;

                ClearForm();
            }
        }
    }

    private void ClearForm()
    {
        NewProjectTask.Title = string.Empty;
        NewProjectTask.Description = string.Empty;
        NewProjectTask.DeadlineDate = DateTime.Now;
        SelectedProjectTask = null;
        ShowNewTaskModal(false);
    }

    private void ShowNewTaskModal(bool show, ProjectTaskDTO task = null)
    {
        if (task is not null)
        {
            NewProjectTask.Title = task.Title;
            NewProjectTask.Description = task.Description;
            NewProjectTask.DeadlineDate = task.DeadlineDate;
            SelectedProjectTask = task;
            IsCreateProjectTaskMode = false;
        }

        NewProjectTaskModalVisible = show;
    }

    private void ShowDeleteModal(ProjectTaskDTO task)
    {
        SelectedProjectTask = task;
        ConfirmAlert.Show();
    }

    private async Task DeleteTask()
    {
        var result = await projectTaskService.DeleteProjectTask(SelectedProjectTask.Id);

        ConfirmAlert.Hide();

        string messageType = result.IsSuccess ? "success" : "error";

        await jsRuntime.ShowToastr(messageType, result.Message);

        if (result.IsSuccess)
        {
            PureTaskList.Remove(PureTaskList.Where(t => t.Id == SelectedProjectTask.Id).Single());
            SelectedProjectTask = null;
        }
    }

    private async Task MarkAsDone(ProjectTaskDTO projectTaskDTO)
    {
        var result = await projectTaskService.MarkAsDone(projectTaskDTO.Id);

        string messageType = result.IsSuccess ? "success" : "error";

        await jsRuntime.ShowToastr(messageType, result.Message);

        if (result.IsSuccess)
        {
            var item = PureTaskList.Where(t => t.Id == projectTaskDTO.Id).Single();

            item.Done = true;
            item.CompleteDate = DateTime.Now;

            SelectedProjectTask = null;
        }
    }

    private async Task<IEnumerable<UserSearchResponseDTO>> SerarchInUsers(string searchText)
    {
        var response = await accountService.SearchUser(searchText);

        return response.Data;
    }

    private void ShowProjectMemberModal(bool show)
    {
        AddProjectMemberModalVisible = show;
    }

    private void AddToMemberList()
    {
        if (!RegisterProjectMemberList.Any(e => e.UserEmail == SelectedUser.UserEmail))
        {
            RegisterProjectMemberList.Add(new ProjectMemberRegisterDTO
            {
                ProjectId = this.ProjectId,
                UserEmail = SelectedUser.UserEmail,
                UserName = SelectedUser.UserName,
                UserId = SelectedUser.UserId
            });
        }
    }

    private void DeleteFromMemberList(string email)
    {
        RegisterProjectMemberList.Remove(RegisterProjectMemberList.Single(m => m.UserEmail == email));
    }

    private async Task SaveProjectMemberList()
    {
        var response = await projectService.AddProjectMember(RegisterProjectMemberList);

        string messageType = response.IsSuccess ? "success" : "error";

        await jsRuntime.ShowToastr(messageType, response.Message);

        ShowProjectMemberModal(false);
        RegisterProjectMemberList.Clear();
        await GetMembers();
    }

    private async Task DeleteMember(string email)
    {
        var deleteMemberDTO = new ProjectMemberDeleteDTO()
        {
            ProjectName = this.ProjectName,
            UserEmail = email
        };

        var response = await projectService.DeleteProjectMember(deleteMemberDTO);

        string messageType = response.IsSuccess ? "success" : "error";

        await jsRuntime.ShowToastr(messageType, response.Message);

        await GetMembers();
    }

    private void ShowAssignedUsersModal(bool show)
    {
        AssignedUsersModalVisible = show;
    }

    private async Task AssignTaskCheckboxChanged(string email, int userId, object value)
    {
        var isChecked = (bool)value;

        if (isChecked)
        {
            await jsRuntime.ShowToastr("info", $"{email} checked.");
        }
    }
}
