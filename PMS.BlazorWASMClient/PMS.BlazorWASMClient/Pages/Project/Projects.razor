@page "/projects"

@inject IProjectService projectService
@inject IJSRuntime jsRuntime

@attribute [Authorize]

<div class="row mb-2">
    <h3>Projects created by @Username</h3>
</div>
<div class="row mb-2">
    <div class="col-2">
        <button type="submit" role="button" class="btn btn-primary" @onclick="()=>ShowNewProjectModal(true)"><i class="fa fa-plus"></i>&nbsp; New Project</button>
    </div>
</div>
<div class="row mb-2">
    <div class="col-2">
        <ListGroup Groups="ProjectTableGroups" SelectedItem="@CurrentProjectTableGroup" OnListItemClicked="OnProjectTableGroupChanged"></ListGroup>
    </div>
    <div class="col">
        <table class="table">
            <thead>
                <tr>
                    <th style="width:3%">#</th>
                    <th style="width:20%">Title</th>
                    <th style="width:40%">Description</th>
                    <th style="width:10%">Created Date</th>
                    <th style="width:10%">Deadline Date</th>
                    <th style="width:10%"></th>
                </tr>
            </thead>
            <tbody>
                @for (int index = 0; index < ProjectList.Count(); index++)
                {
                    int itemIndex = index;
                    string rowClass = string.Empty;

                    if (CurrentProjectTableGroup == ProjectAndTaskGroup.All.ToString())
                    {
                        int daysRemained = (int)(ProjectList[index].DeadlineDate - DateTime.Now).TotalDays;

                        if (daysRemained >= 14)
                        {
                            rowClass = string.Empty;
                        }
                        else if (daysRemained >= 7 && daysRemained < 14)
                        {
                            rowClass = "table-warning";
                        }
                        else if (daysRemained < 7)
                        {
                            rowClass = "table-danger";
                        }
                    }
                    <tr class="@rowClass">
                        <td>@(((CurrentPage-1)*PageSize)+ itemIndex + 1)</td>
                        <td><a style="text-decoration:none;" href="/projects/@ProjectList[itemIndex].Title"> @ProjectList[itemIndex].Title</a></td>
                        <td class="text-wrap">@ProjectList[itemIndex].Description</td>
                        <td data-toggle="tooltip" data-placement="top" title="@(@ProjectList[itemIndex].CreatedDate)">@ProjectList[itemIndex].CreatedDate.ToShortDateString()</td>
                        <td>@ProjectList[itemIndex].DeadlineDate.ToShortDateString()</td>
                        <td>
                            <button class="btn btn-sm btn-warning" @onclick="()=>ShowNewProjectModal(true,ProjectList[itemIndex])">Update</button>
                            <button class="btn btn-sm btn-danger" @onclick="()=>ShowDeleteModal(ProjectList[itemIndex])">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <Pagination @ref="Pagination" ItemCount="ItemCount" PageSize="PageSize" CurrentPage="CurrentPage" OnPageChanged="OnPageChanged"></Pagination>
    </div>
</div>

@if (ShowModal)
{
    <!-- Modal -->
    <div class="modal fade show" id="create-project-modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="create-project-modal-label"
         aria-modal="true" role="dialog" style="display:block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <EditForm Model="NewProject" OnValidSubmit="CreateNewProject">
                    <div class="modal-header">
                        <h5 class="modal-title" id="create-project-modal-header-label">@(IsCreateProjectMode?"New Project":"Update Project")</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="()=>ShowNewProjectModal(false)"></button>
                    </div>
                    <div class="modal-body">
                        <label for="title">Title</label>
                        <InputText id="title" @bind-Value="NewProject.Title" class="form-control" disabled="@(!IsCreateProjectMode)" />
                        <div class="mt-3">
                            <label for="description">Description</label>
                            <InputTextArea id="description" @bind-Value="NewProject.Description" class="form-control" />
                        </div>
                        <div class="mt-3">
                            <label for="deadlineDate">Deadline Date</label>
                            <InputDate id="deadlineDate" @bind-Value="NewProject.DeadlineDate" class="form-control" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="()=>ShowNewProjectModal(false)">Close</button>
                        <button type="submit" class="btn btn-primary">Done</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

<ConfirmAlert @ref="ConfirmAlert" Title="Detele Project" OnConfirm="DeleteProject">
    <div>
        <p>Are you sure you want to delete this project?</p>
        Project Title: <strong>@SelectedProject.Title</strong>
        <div>
            <p class="text-danger">Delete a project will remove all stuff related to project including tasks, teams, files and etc.</p>
        </div>
    </div>
</ConfirmAlert>

@code{
        [CascadingParameter]
        Task<AuthenticationState> AuthenticationState { get; set; }

    private ConfirmAlert ConfirmAlert;
    private Pagination Pagination;

    string Username { get; set; }
    int CurrentPage { get; set; } = 1;
    public int ItemCount { get; set; }
    int PageSize
    {
        get
        {
            return 10;
        }
    }
    string CurrentProjectTableGroup { get; set; } = ProjectAndTaskGroup.All.ToString();
    List<ProjectDTO> PureProjectList = new List<ProjectDTO>();
    private bool ShowModal = false;
    private bool IsCreateProjectMode = true;
    private ProjectDTO SelectedProject;

    Dictionary<string, string> ProjectTableGroups
    {
        get
        {
            Dictionary<string, string> dic = new Dictionary<string, string>();

            foreach (var item in Enum.GetValues(typeof(ProjectAndTaskGroup)))
            {
                var name = item.ToString();
                var text = ((ProjectAndTaskGroup)(Enum.Parse(typeof(ProjectAndTaskGroup), name))).DisplayName();

                dic.Add(name, text);
            }

            return dic;
        }
    }

    List<ProjectDTO> ProjectList
    {
        get
        {
            List<ProjectDTO> list = FilteredTable();

            return list;
        }
    }
    ProjectRegisterDTO NewProject = new ProjectRegisterDTO();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;
        if (authState.User.Identity.IsAuthenticated)
        {
            Username = authState.User.Identity.GetUsername();

            await GetProjectList();
        }
    }

    private async Task GetProjectList()
    {

        var response = await projectService.GetAll();

        if (response.IsSuccess)
        {
            if (response.Data is not null && response.Data.Count() > 0)
            {
                PureProjectList = response.Data.ToList();
            }
        }
        else
        {
            if (response.HttpStatusCodeNumber == 404)
            {
                await jsRuntime.ShowToastr("warning", response.Message);
            }
            else
            {
                await jsRuntime.ShowToastr("error", "An error occured while getting projects from server.");
            }
        }
    }

    private List<ProjectDTO> FilteredTable()
    {
        List<ProjectDTO> list = new List<ProjectDTO>();

        list = PaginateTable(GroupedTable(PureProjectList));

        return list;
    }

    private List<ProjectDTO> GroupedTable(List<ProjectDTO> pureList)
    {
        List<ProjectDTO> list = new List<ProjectDTO>();

        switch (CurrentProjectTableGroup)
        {
            case nameof(ProjectAndTaskGroup.All):
                list = pureList;
                break;
            case nameof(ProjectAndTaskGroup.InProgress):
                list = pureList.Where(p => !p.Finished).ToList();
                break;
            case nameof(ProjectAndTaskGroup.Finished):
                list = pureList.Where(p => p.Finished).ToList();
                break;
        }

        ItemCount = list.Count;

        return list;
    }

    private List<ProjectDTO> PaginateTable(List<ProjectDTO> pureList)
    {
        List<ProjectDTO> list = new List<ProjectDTO>();

        list = pureList.Skip(PageSize * (CurrentPage - 1)).Take(PageSize).ToList();

        return list;
    }

    private void OnProjectTableGroupChanged(string group)
    {
        CurrentProjectTableGroup = group;
        CurrentPage = 1;
    }

    private void OnPageChanged(int page)
    {
        CurrentPage = page;
    }

    private void ShowNewProjectModal(bool show, ProjectDTO project = null)
    {
        if (project is not null)
        {
            NewProject.Title = project.Title;
            NewProject.Description = project.Description;
            NewProject.DeadlineDate = project.DeadlineDate;
            SelectedProject = project;
            IsCreateProjectMode = false;
        }

        ShowModal = show;
    }

    private async Task CreateNewProject()
    {
        if (IsCreateProjectMode)
        {
            var result = await projectService.CreateProject(NewProject);

            string messageType = result.IsSuccess ? "success" : "error";

            await jsRuntime.ShowToastr(messageType, result.Message);

            if (result.IsSuccess)
            {
                ShowModal = false;

                NewProject.Title = string.Empty;
                NewProject.Description = string.Empty;
                NewProject.DeadlineDate = DateTime.Now;

                await GetProjectList();

                CurrentPage = Pagination.LastPageNumber;
            }
        }
        else
        {
            var updatedProject = new ProjectUpdateDTO
            {
                ProjectId = SelectedProject.Id,
                Description = NewProject.Description,
                DeadlineDate = NewProject.DeadlineDate

            };

            var result = await projectService.UpdateProject(updatedProject);

            string messageType = result.IsSuccess ? "success" : "error";

            await jsRuntime.ShowToastr(messageType, result.Message);

            if (result.IsSuccess)
            {
                ShowModal = false;

                NewProject.Title = string.Empty;
                NewProject.Description = string.Empty;
                NewProject.DeadlineDate = DateTime.Now;

                var updatedItem = ProjectList.Where(p => p.Id == updatedProject.ProjectId).Single();
                updatedItem.Description = updatedProject.Description;
                updatedItem.DeadlineDate = updatedProject.DeadlineDate.Value;
            }
        }
    }

    private void ShowDeleteModal(ProjectDTO project)
    {
        SelectedProject = project;
        ConfirmAlert.Show();
    }

    private async Task DeleteProject()
    {
        var result = await projectService.DeleteProject(SelectedProject.Id);

        ConfirmAlert.Hide();

        string messageType = result.IsSuccess ? "success" : "error";

        await jsRuntime.ShowToastr(messageType, result.Message);

        if (result.IsSuccess)
        {
            await GetProjectList();
            SelectedProject = null;
        }
    }
}