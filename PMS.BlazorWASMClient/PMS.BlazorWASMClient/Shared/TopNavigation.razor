@inject INotificationService notificationService
@inject IJSRuntime jsRuntime

<ul class="nav justify-content-end">
    @if (Notifications.Count > 0)
    {
        <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown" href="#" role="button" aria-expanded="false">
                Notifications @if (NewNotificationsCount > 0)
                {
                    <span class="badge bg-danger">@NewNotificationsCount</span>
                }
            </a>
            <ul class="dropdown-menu new-notification-menu">
                @foreach (var notification in Notifications)
                {
                    <li class="new-notification-item"><span>@((MarkupString)notification.NotificationText)</span></li>
                }
                <li><button class="btn btn-primary" style="width:100%;" @onclick="()=>MarkAllAsDone()">Mark As Read</button></li>
            </ul>
        </li>
    }
    else
    {
        <li class="nav-item">
            <a class="nav-link clickable" href="/notifications">
                Notifications
            </a>
        </li>
    }
    <li class="nav-item">
        <a class="nav-link" href="#">Mssages</a>
    </li>
    <li class="nav-item dropdown">
        <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown" href="#" role="button" aria-expanded="false">@Username</a>
        <ul class="dropdown-menu">
            <li><a class="dropdown-item" href="#">Account</a></li>
            <li><hr class="dropdown-divider"></li>
            <li><a class="dropdown-item" href="/account/logout">Logout</a></li>
        </ul>
    </li>
</ul>


@code {
    [CascadingParameter]
    Task<AuthenticationState> AuthenticationState { get; set; }

    public string Username { get; set; }
    List<ClientNotification> Notifications = new List<ClientNotification>();
    public int NewNotificationsCount { get; set; }

    //protected override async Task OnParametersSetAsync()
    //{
    //    var authState = await AuthenticationState;

    //    if (authState.User.Identity.IsAuthenticated)
    //    {
    //        Username = authState.User.Identity.GetUsername();

    //        await GetNotifications();
    //    }
    //}

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;

        if (authState.User.Identity.IsAuthenticated)
        {
            await GetNotifications();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await AuthenticationState;

            if (authState.User.Identity.IsAuthenticated)
            {
                await notificationService.ConnectToNotificationHub();

                notificationService.OnNotificationRecieved += ShowNewNotification;
            }
        }
    }

    private async Task GetNotifications()
    {
        var notifications = await notificationService.GetAll();

        if (notifications is not null && notifications.Count() > 0)
        {
            Notifications = notifications.ToList();
            NewNotificationsCount = Notifications.Count;
        }
    }

    private async Task MarkAllAsDone()
    {
        List<int> ids = new List<int>();

        foreach (var item in Notifications)
        {
            ids.Add(item.NotificationId);
        }

        var response = await notificationService.MarkAsRead(ids.ToArray());

        if (response.IsSuccess)
        {
            NewNotificationsCount = 0;
            Notifications.Clear();

            await GetNotifications();
        }
    }

    private async Task ShowNewNotification(string message)
    {
        await jsRuntime.ShowToastr("info", message);

        await GetNotifications();
    }
}
